{"version":3,"sources":["components/layout/Navbar.js","components/layout/AddItem.js","components/layout/ItemCard.js","components/layout/MainPage.js","App.js","serviceWorker.js","redux/actions/action.js","redux/reducers/reducer.js","model/index.js","redux/configureStore.js","index.js"],"names":["Navbar","className","AddItem","product","name","price","onChange","onSubmit","type","placeholder","value","ItemCard","item","style","color","MainPage","state","filterItemId","undefined","items","id","handleInputChange","event","target","setState","addItem","preventDefault","itemsInState","itemsArrayLength","length","this","map","x","key","filter","toLowerCase","includes","reduce","totalPrices","parseInt","Component","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","RENAME_LIST","FILTER_BY_PRODUCT","reduceTitle","action","title","reduceFilterByProduct","createRootReducer","asyncReducers","combineReducers","BASE_URL","fetchAll","uri","qs","rp","json","catch","err","console","log","fetchUsers","fetchCosts","paidBy","middlewares","applyMiddleware","thunk","createLogger","injectAsyncActionHandler","store","asyncHandler","reducer","replaceReducer","dispatch","dispatcher","createAsyncActionHandler","actionType","promise","defaultValue","pending","fetched","error","substring","currentState","payload","lastIndexOf","then","response","preloadedState","asyncHandlers","users","costs","createStore","update","handler","configureStore","updateStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25af4619.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark mb-5\">\n            <span className=\"navbar-brand mb-0 h1 mx-auto\">Integration Weekend</span>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddItem = ({product, name, price, onChange, onSubmit}) => (\n    <div className=\"row justify-content-center\">\n      <form className=\"form-inline\" onSubmit={onSubmit}>\n        <input\n            type=\"text\"\n            className=\"form-control mb-2 mr-sm-2\"\n            placeholder=\"Where?\"\n            value={product}\n            name=\"product\"\n            onChange={onChange}\n        />\n\n        <div className=\"input-group mb-2 mr-sm-2\">\n          <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Who?\"\n              value={name}\n              name=\"name\"\n              onChange={onChange}\n          />\n        </div>\n\n        <div className=\"input-group mb-2 mr-sm-2\">\n          <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"€€€\"\n              value={price}\n              name=\"price\"\n              onChange={onChange}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary mb-2 pxy-4\"><i className=\"fas fa-plus-square\"></i></button>\n      </form>\n    </div>\n);\n\nAddItem.propTypes = {\n  product: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};","import React from 'react';\n\nexport const ItemCard = ({item}) => (\n    <div className=\"container\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n           <div className=\"box\">\n           <span><b style={{color: 'blue'}}>{item.product}</b></span>\n           <span>{item.name}</span>\n           <span><b style={{color: 'blue'}}>{item.price}€</b></span>\n          </div>\n        </div>\n      </div>\n    </div>\n);\n\n","import React, { Component } from 'react';\nimport {AddItem} from \"./AddItem\";\nimport {ItemCard} from \"./ItemCard\";\n\n\n\nclass MainPage extends Component {\n    state = {\n                product: \"\",\n                name: \"\",\n                price: \"\",\n                filterItemId: undefined,\n                items: [\n                    {id:1,product:'Winter body', name: \"test1\", price:110},\n                    {id:2,product:'Adidas', name: \"test2\", price:80},\n                    {id:3,product:'Vans', name: \"test3\",price:120},\n                    {id:4,product:'White', name: \"test4\", price:260},\n                    {id:5,product:'Cropped-sho', name: \"test5\", price:160},\n                    {id:6,product:'Blues', name: \"test6\",price:90}\n                ]\n            };\n            \n     \n\n    /**\n     * Handle input changes in the AddItem component.\n     * @param event\n     */\n    handleInputChange = event => {\n        const target = event.target;\n        const value = target.value;\n       const name = target.name;        \n        this.setState({\n            [name]: value\n        });\n    };\n\n    /**\n     * Add an item to state.\n     * @param event\n     */\n    addItem = event => {\n        event.preventDefault();\n        const {product, name, price} = this.state;\n        const itemsInState = this.state.items;\n        const itemsArrayLength = itemsInState.length;\n        const id = itemsArrayLength ? (itemsInState[itemsArrayLength - 1].id + 1) : 1;\n        this.setState({\n        items: [\n            ...itemsInState,\n            {\n            id,\n            product,\n            name,\n            price\n            }\n        ],\n        product: \"\",\n        name: \"\",\n        price: \"\"\n        })\n    };\n\n\n    render() {\n\n    const {product, name, price} = this.state;\n        return (\n            <div className=\"container\">\n                \n                <div>\n                    <select value={this.state.filterItemId} name=\"filterItemId\" onChange={this.handleInputChange}>\n                            <option value=\"\">** All</option>\n                            {this.state.items.map((x) => <option key={x.id}>{x.product}</option>)}\n                    </select>\n                </div>\n                <h1 className=\"center\">Buyers and their products</h1>\n                \n                <div className=\"row\">\n                    {\n                        this.state.items\n                        .filter((item) => {\n                            return !this.state.filterItemId ? true : item.product.toLowerCase().includes(this.state.filterItemId.toLowerCase())\n                        }).map((item)=><ItemCard\n                        key={item.id}\n                        item={item}/>)\n                    }\n                </div>\n                <div className=\"card\">\n                    <AddItem\n                        product={product}\n                        name={name}\n                        price={price}\n                        onChange={this.handleInputChange}\n                        onSubmit={this.addItem}\n                    />\n                </div>\n                <div >\n                <b style={{color: 'black'}}>Total Expenses:{\n                   this.state.items.reduce((totalPrices, item) => totalPrices+parseInt(item.price), 0)\n                    \n                }€ </b>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainPage","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Navbar from './components/layout/Navbar';\nimport MainPage from './components/layout/MainPage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <React.Fragment>\n        <Navbar></Navbar>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={MainPage} />\n          </Switch>\n        </div>\n      </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Actions constants\nexport const ADD_COST = 'ADD_COST'\nexport const RENAME_LIST = 'RENAME_LIST'\nexport const FILTER_BY_PRODUCT = 'FILTER_BY_PRODUCT'\n\n// Actions creators\nexport const addCost = (paidBy, title, amount) => ({\n    type: ADD_COST,\n    cost: { paidBy, title, amount }\n})\n\nexport const renameList = (title) => ({\n    type: RENAME_LIST,\n    title\n})\n\nexport const filterByProduct = (product) => ({\n    type: FILTER_BY_PRODUCT,\n    product\n})","import { FILTER_BY_PRODUCT, RENAME_LIST } from '../actions/action'\nimport { combineReducers } from 'redux'\n\nfunction reduceTitle(state = 'Integration Weekend', action) {\n    switch (action.type) {\n        case RENAME_LIST:\n            return action.title\n        default:\n            return state\n    }\n}\n\nfunction reduceFilterByProduct(state = '', action) {\n    switch (action.type) {\n        case FILTER_BY_PRODUCT:\n            return action.product\n\n        default:\n            return state\n    }\n}\n\n\nexport default function createRootReducer(asyncReducers) {\n    return combineReducers({\n        title: reduceTitle,\n        product: reduceFilterByProduct,\n        ...asyncReducers\n    });\n}","//import requestPromise from 'request-promise'\nimport rp from 'request-promise'\n\nconst BASE_URL = 'http://localhost:3000/api/'\n\nfunction fetchAll(uri, qs = {}) {\n    return rp({ \n        uri: BASE_URL + uri, \n        qs, \n        json: true\n    })\n    .catch(err => console.log(err))\n}\n\nfunction post(uri, body = {}) {\n    return rp({\n        uri: BASE_URL + uri,\n        body,\n        json: true,\n        method: 'post'\n    })\n}\n\nexport const postCost = (cost) => post(\"costs\", cost)\nexport const fetchUsers = () => fetchAll(\"users\")\nexport const fetchCosts = (paidBy = {}) => fetchAll(\"costs\", { paidBy })","import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger' // This will log into our console information about redux actions & store\nimport thunk from 'redux-thunk' // This middleware allows us to use Promises in our actions (async in action)\n\n//import rootReducer from './reducers/rootReducer' // We will implement this later on, create a file exporting and empty object for now\nimport createRootReducer from './reducers/reducer'\nimport { fetchCosts, fetchUsers } from '../model/index'\n\n\nconst middlewares = applyMiddleware(thunk, createLogger())\n\n\nexport function injectAsyncActionHandler(store, name, asyncHandler){\n  store.asyncReducers[name] = asyncHandler.reducer;\n  store.replaceReducer(createRootReducer(store.asyncReducers));\n  store.dispatch(asyncHandler.dispatcher)\n}\n\n\nexport default function configureStore(preloadedState = {}) { // preloadedState is useful for SSR, which we don't use\n  const asyncHandlers = {\n    users: createAsyncActionHandler('FETCH_USERS', fetchUsers(), []),\n    costs: createAsyncActionHandler('FETCH_COSTS', fetchCosts(), [])\n  }\n\n  const store = createStore(createRootReducer(), preloadedState, middlewares)\n  store.asyncReducers = {};\n\n  store.update = () => {\n    for (const handler in asyncHandlers) {\n      store.dispatch(handler.dispatcher)\n    }\n  }\n\n  for (let key in asyncHandlers) {\n    injectAsyncActionHandler(store, key, asyncHandlers[key])\n  }\n\n  return store\n}\n\n\n/**\n * Create an asynchronous action handler, which means a couple composed of the promise\n * dispatcher and the associated reducer\n *  - dispatcher is responsible for starting the promise resolution and dispatching action corresponding\n *    to different request resolution state\n *  - reducer is the handler responsible for managing the state during the promise resolution lifecycle\n * (I tried to make more abstract the management of asynchronous action handling, it's a try and \n * it's probably not a good and used pattern in React)\n * @param {string} actionType The action prefix used during all the async treatment lifecycle\n * @param {Promise} promise The promise that will be used to retrieve data synchronously\n * @param {mixed} defaultValue Default value if promise fail or return null value\n */\nfunction createAsyncActionHandler(actionType, promise, defaultValue = {}) {\n\n  /**\n   * The async state wraps the value and trace the state of the promise resolution (pending, fetched, etc.)\n   */\n  function asyncState() {\n      return {\n          pending: false,\n          fetched: false,\n          error: null,\n          value: defaultValue\n      }\n  }\n\n  /**\n   * Execute the promise and dispatch actions according to its state.\n   * Given that reducer and dispatcher is generated in the same scope,\n   *   so it ensures that they manage the same actions.     * \n   * @param {*} dispatch \n   */\n  function dispatcher(dispatch) {\n      dispatch({ type: actionType + '.start' })\n      promise\n          .then(response =>\n              // Dispatch the action for fulfilled promise\n              dispatch({ type: actionType + '.fulfilled', payload: response }))\n          .catch(err =>\n              dispatch({ type: actionType + '.error', payload: err }))\n  }\n\n  function onStart(currentState) {\n      return { ...currentState, pending: true }\n  }\n\n  function onError(currentState, payload) {\n      return { ...currentState, pending: false, error: payload }\n  }\n\n  function onFulfilled(currentState, payload) {\n      return {\n          ...currentState,\n          pending: false,\n          fetched: true,\n          value: payload\n      }\n  }\n\n  function reducer(state = asyncState(), action) {\n      // Only treat action with the matching prefix\n      if (action.type.substring(0, actionType.length) !== actionType)\n          return state\n\n      // Parsing the promise phase from the action name (start, error, fulfilled)\n      const phase = action.type.substring(action.type.lastIndexOf(\".\") + 1)\n\n      const actionHandlers = {\n          'start': () => onStart(state),\n          'error': () => onError(state, action.payload),\n          'fulfilled': () => onFulfilled(state, action.payload)\n      }\n\n      // Executing the corresponding handler to create the state, or return the state by default\n      return (actionHandlers[phase] || (() => state))()\n  }\n\n  return {\n      reducer,\n      dispatcher\n  }\n\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\n/*import { createStore } from 'redux';*/\n\nimport'./index.css';\n\n\nconst store = configureStore()\n\nstore.updateStore  = () => {\n    for (let handler of store.asyncHandlers){\n        store.dispatch(handler.dispatch)\n    }\n}\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}